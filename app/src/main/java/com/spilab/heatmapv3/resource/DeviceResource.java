/**
 * Heatmap API
 * This api provides us with the set of positions and frequencies of the different connected devices to generate a heat map.
 *
 * OpenAPI spec version: 3.0
 * Contact: spilab.uex@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.spilab.heatmapv3.resource;




import android.content.Context;
import android.content.Intent;

import androidx.localbroadcastmanager.content.LocalBroadcastManager;

import com.android.volley.RequestQueue;
import com.android.volley.toolbox.Volley;
import com.spilab.heatmapv3.response.DeviceResponse;
import com.spilab.heatmapv3.service.LogService;


public class DeviceResource {

    private Context context;
    private RequestQueue request;

    private DeviceResponse deviceResponse;

    public DeviceResource(Context context) {
        this.context = context;
        request = Volley.newRequestQueue(context);

    }

  public void executeMethod(DeviceResponse response){

        deviceResponse=response;

      switch (response.getMethod()){
          case "restartApp":
            restartApp(response.getParams().gettimeout());
            break;

          case "saveLogs":
              saveLogs();
              break;

          case "deleteLogs":
              deleteLogs();
              break;
      }


  }

  /**
  * Restart app in to mobile devices.
  * 
   * @param timeout wait time to start app after close (ms)
   * @return List<LocationFrequency>
  */
  public void restartApp (Double timeout){

      //SEND TO MAINACTIVITY
      //SEND TO MAINACTIVITY
      Intent intentProfile = new Intent();
      intentProfile.putExtra("timeout", deviceResponse.getParams().gettimeout());
      intentProfile.setAction("RESTART");
      LocalBroadcastManager.getInstance(context).sendBroadcast(intentProfile);
  }

    public void saveLogs (){

        new LogService(context).sendLogs();
    }

    public void deleteLogs (){


        new LogService(context).deleteLogs();
    }
}
